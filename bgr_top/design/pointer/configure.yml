#=========================================================================
# Mentor Calibre GDS Merge
#=========================================================================
# Author : Christopher Torng
# Date   : November 5, 2019
#

name: pointer

#-------------------------------------------------------------------------
# Inputs and Outputs
#-------------------------------------------------------------------------

inputs:
  - innovus-foundation-flow
  - adk
  - design.checkpoint

outputs:
  - design.checkpoint
  - design_merged.gds
  - design.gds.gz
  - design.lvs.v
  - design.lef

#-------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------

commands:
  - ln -sf inputs/innovus-foundation-flow
  - cp ../../interface/gen-0-id-0/ .
  - cd outputs
  - ln -sf ../checkpoints/design.checkpoint
  - ln -sf ../*.gds.gz            design.gds.gz
  - ln -sf ../*-merged.gds        design-merged.gds
  - ln -sf ../*.lvs.v             design.lvs.v
  - ln -sf ../*.lef               design.lef
#-------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------

parameters:
  design_name: undefined

#-------------------------------------------------------------------------
# Debug
#-------------------------------------------------------------------------

debug:
  - calibredrv -m design_merged.gds \
               -l inputs/adk/calibre.layerprops

#-------------------------------------------------------------------------
# Assertions
#-------------------------------------------------------------------------

preconditions:

  - assert Tool( 'calibredrv' )
  - assert File( 'inputs/design.gds.gz' )

postconditions:

  - assert File( 'outputs/design_merged.gds' )

  # Duplicate structures
  #
  # GDS can be hierarchical, meaning they have holes where library cells
  # (e.g., stdcell GDS) can be filled in. If library cell names conflict,
  # there is a chance that one definition will overwrite the other and you
  # will see a very weird GDS that may not be functional or DRC clean
  # anymore (e.g., one SRAM macro may now be using another SRAM macro's
  # bitcell array). If a conflict happens unexpectedly here and goes by
  # undetected, it can take days or weeks to debug LVS before finally
  # realizing it was an incorrect GDS merge.
  #
  # Assert here to make sure we detect it early. There is a choice for
  # what to do next for the merged GDS: (1) use one library's version, (2)
  # use the other library's version, (3) rename both and each reference
  # their own version, (4) something else...
  #

  - "assert 'WARNING: Ignoring duplicate structure'
      not in File( 'merge.log' )"